pipeline 
{
    agent any
    tools {dockerTool  "docker" } 
    environment 
    {
        git_dev_branch_name = 'master'
        IBM_DOCKER_REGISTRY = 'https://sagcr.azurecr.io'
        DOCKERHUB_REGISTRY = 'https://index.docker.io/v1/'
        DOCKERHUB_CREDENTIALS = 'dockerhub-credentials'  // Jenkins credentials ID for Docker Hub
        IBMHUB_CREDENTIALS = 'ibmhub-credentials' // Jenkins credentials ID for Docker Hub
    }    
    stages 
    {
        stage('Read Version File') {
            steps {
                script {
                    // Path to the file
                    def filePath = 'applications/apigateway/version.txt'
                    
                    // Read file contents
                    def fileContents = readFile(filePath)
                    
                    // Define a map to hold the values
                    def versionMap = [:]
                    
                    // Process each line
                    fileContents.split('\n').each { line ->
                        def (key, value) = line.split('=')
                        if (key && value) {
                            versionMap[key.trim()] = value.trim()
                        }
                    }
                    
                    // Extract values
                    def major = versionMap.get('MAJOR', '0')
                    def minor = versionMap.get('MINOR', '0')
                    def patch = versionMap.get('PATCH', '0')
                    def imageName = versionMap.get('IMAGE_NAME', 'unknown')
                    def baseImageName = versionMap.get('BASE_IMAGE_NAME', 'unknown')
                    
                    // Format the version and image name
                    def imageVersion = "${major}.${minor}.${patch}"
                    
                    // Print or use the values as needed
                    echo "Image Version: ${imageVersion}"
                    echo "Base Image Version: ${baseImageName}"
                    echo "Image Name: ${imageName}"
                    
                    // Example of setting environment variables (if needed for later stages)
                    env.IMAGE_TAG = imageVersion
                    env.IMAGE_NAME = imageName
                    env.BASE_IMAGE_NAME = baseImageName
                }
            }
        }
        stage('Pull Base Image') {
            steps {
                script {
                    docker.withTool('docker') {
                        docker.withRegistry("${env.IBM_DOCKER_REGISTRY}","${IBMHUB_CREDENTIALS}") {
                        // Pull the base image from the registry
                        docker.image("${env.BASE_IMAGE_NAME}").pull()
                        echo "Base image pulled: ${env.BASE_IMAGE_NAME}"
                        }
                    }
                }
            }
        }
        stage('Build Solution APIGW Image') {
            steps {
                script {
                    // Define the Dockerfile context directory
                    def dockerfileContext = 'applications' // Adjust this path as needed
                    docker.build("${IMAGE_NAME}:${env.IMAGE_TAG}", "-f ${dockerfileContext}/apigateway/Dockerfile ${dockerfileContext}")           
                }
            }
        }
        stage('Push Solution APIGW Image To DockerHub') {
            steps {
                script {
                    docker.withTool('docker') {
                        docker.withRegistry("${env.DOCKERHUB_REGISTRY}","${DOCKERHUB_CREDENTIALS}") {
                            // Pull the base image from the registry
                            def customImage = docker.image("${env.IMAGE_NAME}:${env.IMAGE_TAG}")
                            customImage.push() // Push the image with the specified tag
                            echo "Image pushed to registry: ${env.DOCKERHUB_REGISTRY}/${env.IMAGE_NAME}:${env.IMAGE_TAG}"
                        }
                    }
                }
            }
        }  
    }         
    post {
        always {
            script {
                cleanWs()
                echo "Workspace cleaned up"
            }
        }
    }                               
}