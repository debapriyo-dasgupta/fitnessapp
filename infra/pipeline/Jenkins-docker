pipeline 
{
    agent any
    environment 
    {
        git_dev_branch_name = 'master'
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')  // Jenkins credentials ID for Docker Hub
    }    
    stages 
    {
        stage('Read Version File') {
            steps {
                script {
                    // Path to the file
                    def filePath = 'applications/apigateway/version.txt'
                    
                    // Read file contents
                    def fileContents = readFile(filePath)
                    
                    // Define a map to hold the values
                    def versionMap = [:]
                    
                    // Process each line
                    fileContents.split('\n').each { line ->
                        def (key, value) = line.split('=')
                        if (key && value) {
                            versionMap[key.trim()] = value.trim()
                        }
                    }
                    
                    // Extract values
                    def major = versionMap.get('MAJOR', '0')
                    def minor = versionMap.get('MINOR', '0')
                    def patch = versionMap.get('PATCH', '0')
                    def imageName = versionMap.get('IMAGE_NAME', 'unknown')
                    
                    // Format the version and image name
                    def imageVersion = "${major}.${minor}.${patch}"
                    
                    // Print or use the values as needed
                    echo "Image Version: ${imageVersion}"
                    echo "Image Name: ${imageName}"
                    
                    // Example of setting environment variables (if needed for later stages)
                    env.IMAGE_VERSION = imageVersion
                    env.IMAGE_NAME = imageName
                }
            }
        }
        stage('Initialize') {
            steps {
                script {
                    // Define the Docker tool's home directory
                    def dockerHome = tool name: 'docker'

                    // Update the PATH environment variable to include the Docker binary directory
                    env.PATH = "${dockerHome}/bin:${env.PATH}"
                }
            }
        }
        stage('Build APIGW Image') {
            steps {
                script {
                    // Define the Dockerfile context directory
                    def dockerfileContext = 'applications/' // Adjust this path as needed

                    // Use the Docker tool
                    docker.withTool('docker') {
                        // Build the Docker image with context
                        def customImage = docker.build("${IMAGE_NAME}", "-f ${dockerfileContext}/apigateway/Dockerfile ${dockerfileContext}")
                    }
                }
            }
        }      
    }                                        
}