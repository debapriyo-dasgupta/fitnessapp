pipeline 
{
    agent any
    environment 
    {
        git_dev_branch_name = 'master'
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')  // Jenkins credentials ID for Docker Hub
    }    
    stages 
    {
        stage('Read Version File') {
            steps {
                script {
                    // Path to the file
                    def filePath = 'applications/apigateway/version.txt'
                    
                    // Read file contents
                    def fileContents = readFile(filePath)
                    
                    // Define a map to hold the values
                    def versionMap = [:]
                    
                    // Process each line
                    fileContents.split('\n').each { line ->
                        def (key, value) = line.split('=')
                        if (key && value) {
                            versionMap[key.trim()] = value.trim()
                        }
                    }
                    
                    // Extract values
                    def major = versionMap.get('MAJOR', '0')
                    def minor = versionMap.get('MINOR', '0')
                    def patch = versionMap.get('PATCH', '0')
                    def imageName = versionMap.get('IMAGE_NAME', 'unknown')
                    
                    // Format the version and image name
                    def imageVersion = "${major}.${minor}.${patch}"
                    
                    // Print or use the values as needed
                    echo "Image Version: ${imageVersion}"
                    echo "Image Name: ${imageName}"
                    
                    // Example of setting environment variables (if needed for later stages)
                    env.IMAGE_VERSION = imageVersion
                    env.IMAGE_NAME = imageName
                }
            }
        }
        stage('Initialize') {
            steps {
                script {
                    // Define the Docker tool's home directory
                    def dockerHome = tool name: 'docker'

                    // Update the PATH environment variable to include the Docker binary directory
                    env.PATH = "${dockerHome}/bin:${env.PATH}"
                }
            }
        }
        stage('Build APIGW Image') {
            steps {
                script {
                    // Define the function to extract version details
                    def getVersion = { filePath ->
                        // Read and trim the file contents
                        def fileContents = readFile(filePath).trim()

                        // Debugging: print file contents
                        echo "File Contents:\n${fileContents}"

                        // Extract values using a more precise approach
                        def major = fileContents.find(/(?m)^MAJOR=(.*)$/) { match, group -> group?.trim() }
                        def minor = fileContents.find(/(?m)^MINOR=(.*)$/) { match, group -> group?.trim() }
                        def patch = fileContents.find(/(?m)^PATCH=(.*)$/) { match, group -> group?.trim() }
                        def imageName = fileContents.find(/(?m)^IMAGE_NAME=(.*)$/) { match, group -> group?.trim() }

                        // Print extracted values for debugging
                        echo "Extracted Major: ${major}"
                        echo "Extracted Minor: ${minor}"
                        echo "Extracted Patch: ${patch}"
                        echo "Extracted Image Name: ${imageName}"

                        // Default to empty string if values are null
                        major = major ?: ''
                        minor = minor ?: ''
                        patch = patch ?: ''

                        // Construct version string
                        def version = patch ? "${major}.${minor}.${patch}" : "${major}.${minor}"

                        // Return values
                        return [version, imageName]
                    }

                    // Read version details from the file
                    def (VERSION, IMAGE_NAME) = getVersion("applications/apigateway/version.txt")

                    // Output for debugging
                    echo "Version: ${VERSION}"
                    echo "Image Name: ${IMAGE_NAME}"

                    // Use the Docker tool
                    docker.withTool('docker') {
                        // Build the Docker image
                        def customImage = docker.build("${IMAGE_NAME}")
                    }
                }
            }
        }




        stage('BASE IMAGE BUILD') 
        {         
            steps 
            {
                script
                {
                    img='httpd:2.4-alpine'
                    docker.image("${img}").run('-d -p 80:80')
                }
            }
        }            
    }                                        
}