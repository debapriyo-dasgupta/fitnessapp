pipeline 
{
    agent any
    environment 
    {
        git_dev_branch_name = 'master'
        stg_namespace= 'staging'
        stg_env_name = 'staging'   
        stg_openshift_namespace= 'kplogesh-dev'
    }    
    stages 
    {       
        stage('SETENV') 
        {         
            steps 
            {
                sh "chmod +x -R ${env.WORKSPACE}"             
            }
        }    
        stage('RANCHER FITNESS DEPLOY') 
        {         
            steps 
            {
                withCredentials([file(credentialsId: 'stg-kube-config', variable: 'KUBECONFIG')]) 
                {
                    sh "pipeline/common.lib/deploy/deploy-licenses.sh ${stg_env_name} ${stg_namespace}" 
                    sh "pipeline/common.lib/deploy/deploy-fitness-apigateway.sh ${stg_env_name} ${stg_namespace}" 
                    sh "pipeline/common.lib/deploy/deploy-fitness-assessments.sh ${stg_env_name} ${stg_namespace}"  
                    sh "pipeline/common.lib/deploy/deploy-fitness-challenges.sh ${stg_env_name} ${stg_namespace}" 
                    sh "pipeline/common.lib/deploy/deploy-fitness-memberships.sh ${stg_env_name} ${stg_namespace}" 
                    sh "pipeline/common.lib/deploy/deploy-fitness-points.sh ${stg_env_name} ${stg_namespace}" 
                    sh "pipeline/common.lib/deploy/deploy-fitness-rewards.sh ${stg_env_name} ${stg_namespace}" 
                }
            }
        } /*
        stage('AKS FITNESS DEPLOY') 
        {         
            steps 
            {
                withCredentials([file(credentialsId: 'stg-demoaks-config', variable: 'KUBECONFIG')]) 
                {
                    sh "pipeline/common.lib/deploy/deploy-licenses.sh ${stg_env_name} ${stg_namespace}" 
                    sh "pipeline/common.lib/deploy/deploy-fitness-apigateway.sh ${stg_env_name} ${stg_namespace}" 
                    sh "pipeline/common.lib/deploy/deploy-fitness-assessments.sh ${stg_env_name} ${stg_namespace}"  
                    sh "pipeline/common.lib/deploy/deploy-fitness-challenges.sh ${stg_env_name} ${stg_namespace}" 
                    sh "pipeline/common.lib/deploy/deploy-fitness-memberships.sh ${stg_env_name} ${stg_namespace}" 
                    sh "pipeline/common.lib/deploy/deploy-fitness-points.sh ${stg_env_name} ${stg_namespace}" 
                    sh "pipeline/common.lib/deploy/deploy-fitness-rewards.sh ${stg_env_name} ${stg_namespace}" 
                }
            }
        } */
        stage('OPENSHIFT FITNESS DEPLOY') 
        {         
            steps 
            {
                withCredentials([file(credentialsId: 'stg-demoopenshift-config', variable: 'KUBECONFIG')]) 
                {
                    sh "pipeline/common.lib/deploy/deploy-licenses.sh ${stg_env_name} ${stg_openshift_namespace}" 
                    sh "pipeline/common.lib/deploy/deploy-fitness-apigateway.sh ${stg_env_name} ${stg_openshift_namespace}" 
                    sh "pipeline/common.lib/deploy/deploy-fitness-assessments.sh ${stg_env_name} ${stg_openshift_namespace}"  
                    sh "pipeline/common.lib/deploy/deploy-fitness-challenges.sh ${stg_env_name} ${stg_openshift_namespace}" 
                    sh "pipeline/common.lib/deploy/deploy-fitness-memberships.sh ${stg_env_name} ${stg_openshift_namespace}" 
                    sh "pipeline/common.lib/deploy/deploy-fitness-points.sh ${stg_env_name} ${stg_openshift_namespace}" 
                    sh "pipeline/common.lib/deploy/deploy-fitness-rewards.sh ${stg_env_name} ${stg_openshift_namespace}" 
                }
            }
        }
        stage('RANCHER OBSERVABILITY DEPLOY') 
        {         
            steps 
            {
                withCredentials([file(credentialsId: 'stg-kube-config', variable: 'KUBECONFIG')]) 
                {
                    sh "pipeline/common.lib/deploy/deploy-observability.sh ${stg_env_name} ${stg_namespace}" 
                }
            }
        }
    }                                   
    post 
    { 
        always 
        { 
            cleanWs()
        }
    }       
}